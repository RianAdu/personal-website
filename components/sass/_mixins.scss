@mixin clearfix {
	zoom:1;

	&:before, 
	&:after{
		content: "";
		display: table;
	}

	&:after {
		clear: both;
	}
}

@mixin fullPageBackground($image){
	background: url($image); 
  background-repeat: no-repeat;
  background-position:center center;
	-webkit-background-size: cover!important;
	-moz-background-size: cover!important;
	-o-background-size: cover!important;
	background-size: cover!important;
}

@mixin roundedCorners($value) {
	-moz-border-radius: $value;
    -webkit-border-radius: $value;
    -khtml-border-radius: $value;
    -o-border-radius:$value;
    border-radius: $value;
}

@mixin boxShadows($shadowColor) {
	-khtml-box-shadow: 0 8px 6px -6px $shadowColor;
	-webkit-box-shadow: 0 8px 6px -6px $shadowColor;
	-moz-box-shadow: 0 8px 6px -6px $shadowColor;
	-o-box-shadow: 0 8px 6px -6px $shadowColor;
	box-shadow: 0 8px 6px -6px $shadowColor;
}

@mixin removeWebkitStyle{ //removes input field styling from mobile deveices
	-webkit-appearance: none;
    -moz-appearance: none;
    -khtml-appearance:none;
	-o-appearance:none;
    appearance: none;
}

@mixin valignment{
	position: relative;
	top: 50%;
	transform: translateY(-50%);
}

//rem to pixel fallback mixin
@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

@mixin remFontSize($property, $values...) {
  $max: length($values);
  $pxValues: '';
  $remValues: '';

  @for $i from 1 through $max {
    $value: strip-unit(nth($values, $i));
    $pxValues: #{$pxValues + $value*16}px;

    @if $i < $max {
      $pxValues: #{$pxValues + " "};
    }
  } 

  @for $i from 1 through $max {
    $value: strip-unit(nth($values, $i));
    $remValues: #{$remValues + $value}rem;

    @if $i < $max {
      $remValues: #{$remValues + " "};
    }
  } 
  
  #{$property}: $pxValues; 
  #{$property}: $remValues; 
}